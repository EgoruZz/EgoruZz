name: WakaTime Sync
on:
  schedule:
    - cron: "0 0 * * 1"  # –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 00:00 UTC
    - cron: "0 */3 * * *"  # –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
  workflow_dispatch:

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc figlet toilet
          sudo npm install -g cowsay || sudo apt-get install -y cowsay || echo "Cowsay not available"
          sudo apt-get install -y fortune-mod || echo "Fortune not available"
      
      - name: Fetch and process stats
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞—Ä—á–∞—Ä—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
          generate_bar() {
            local percent=${1:-0}
            percent=$(( percent < 0 ? 0 : (percent > 100 ? 100 : percent ) )
            local bar=""
            for ((i=0; i<10; i++)); do
              [ $i -lt $((percent/10)) ] && bar+="‚ñì" || bar+="‚ñë"
            done
            echo "$bar $percent%"
          }

          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
          if [ "$(date -u +%u)" -eq 1 ] && [ "$(date -u +%H)" -eq 0 ]; then
            CACHE_BUSTER=$(date +%s)
            REPORT_TYPE="üöÄ WEEKLY RESET"
            HEADER_STYLE=$(toilet -f term -F border --gay 'WEEKLY RESET' 2>/dev/null || echo 'WEEKLY CODING REPORT')
            DATE_RANGE="$(date -d 'last monday' +'%Y-%m-%d') ‚Üí $(date -d 'last sunday' +'%Y-%m-%d')"
            echo "::notice title=Weekly Reset::Full week reset initiated"
          else
            CACHE_BUSTER="cache"
            REPORT_TYPE="üìà AUTO UPDATE"
            HEADER_STYLE=$(figlet -f slant 'Code Pulse' 2>/dev/null || echo 'CODING STATS')
            DATE_RANGE="$(date -d '7 days ago' +'%Y-%m-%d') ‚Üí $(date +'%Y-%m-%d')"
          fi

          # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫
          API_URL="https://wakatime.com/api/v1/users/current/stats/last_7_days?api_key=$WAKATIME_API_KEY&cache_buster=$CACHE_BUSTER"
          curl -s "$API_URL" > wakatime.json
          
          if ! jq -e '.data' wakatime.json >/dev/null; then
            echo "::error::WakaTime API request failed"
            echo '```text' > stats.md
            echo "‚ö†Ô∏è ERROR FETCHING STATS" >> stats.md
            echo "üîÑ Last sync attempt: $(date +'%Y-%m-%d %H:%M') (MSK)" >> stats.md
            echo "üîó API Status: $(curl -s -o /dev/null -w '%{http_code}' "$API_URL")" >> stats.md
            echo '```' >> stats.md
          else
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            total_seconds=$(jq -r '.data.total_seconds // 0' wakatime.json)
            best_day_seconds=$(jq -r '.data.best_day.total_seconds // 0' wakatime.json)
            productivity=$(echo "scale=1; $best_day_seconds * 100 / ($total_seconds + 1)" | bc)

            # –§–æ—Ä–º–∏—Ä—É–µ–º Markdown –æ—Ç—á–µ—Ç
            echo '```text' > stats.md
            echo "$HEADER_STYLE" >> stats.md
            echo "‚è≥ $REPORT_TYPE ¬ª $DATE_RANGE" >> stats.md
            echo "üîÑ Last sync: $(date +'%Y-%m-%d %H:%M') (MSK)" >> stats.md
            echo "" >> stats.md
            
            echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" >> stats.md
            echo "‚ïë          üìä CODING ANALYTICS             ‚ïë" >> stats.md
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" >> stats.md
            printf "‚ïë Total Time        ‚ïë %19s ‚ïë\n" "$(jq -r '.data.human_readable_total // "0 secs"' wakatime.json)" >> stats.md
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" >> stats.md
            printf "‚ïë Daily Avg         ‚ïë %19s ‚ïë\n" "$(jq -r '.data.human_readable_daily_average // "0 secs"' wakatime.json)" >> stats.md
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" >> stats.md
            printf "‚ïë Best Day          ‚ïë %19s ‚ïë\n" "$(jq -r '(.data.best_day.text // "0 secs") + " (" + (.data.best_day.date // "N/A") + ")"" wakatime.json)" >> stats.md
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" >> stats.md
            printf "‚ïë Productivity Peak ‚ïë %19s ‚ïë\n" "$(generate_bar ${productivity%.*})" >> stats.md
            echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" >> stats.md
            echo "" >> stats.md
            
            echo "üî• TOP 5 TECHNOLOGIES" >> stats.md
            jq -r '.data.languages[0:5] | .[]? | "‚ñå \(.name): \(.text) \((.percent|floor)*100/100)%\n  \((generate_bar (.percent|floor)))"' wakatime.json >> stats.md
            echo "" >> stats.md
            
            echo "üìÖ WEEKLY ACTIVITY" >> stats.md
            echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" >> stats.md
            echo "‚îÇ Day   ‚îÇ Coding Time  ‚îÇ Activity Graph   ‚îÇ" >> stats.md
            echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
            jq -r '.data.days | to_entries? | .[]? | "‚îÇ \(.key[:3])   ‚îÇ \(.value.text) ‚îÇ \(generate_bar (.value.percent|floor)) ‚îÇ"' wakatime.json >> stats.md
            echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" >> stats.md
            echo "" >> stats.md
            
            # –°–ª—É—á–∞–π–Ω—ã–π ASCII-–∞—Ä—Ç —Å fallback
            ascii_art=(
              "$(cowsay -f $(ls /usr/share/cowsay/cows | shuf -n 1) 'Keep coding!' 2>/dev/null)"
              "$(fortune | cowsay 2>/dev/null)"
              ">>> Today is $(date +'%A') - perfect day to code! <<<"
            )
            echo "${ascii_art[$RANDOM % ${#ascii_art[@]}]}" >> stats.md
            echo '```' >> stats.md
          fi

          # –û–±–Ω–æ–≤–ª—è–µ–º README
          sed -i '/<!--START_SECTION:waka-->/,/<!--END_SECTION:waka-->/{
              /<!--START_SECTION:waka-->/r stats.md
              d
          }' README.md
          
          rm -f stats.md wakatime.json
      
      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          
          if ! git diff --quiet --exit-code README.md; then
            if [ "$(date -u +%u)" -eq 1 ] && [ "$(date -u +%H)" -eq 0 ]; then
              git commit -m "üöÄ Weekly stats reset [$(date +'%Y-%m-%d')]" \
                         -m "Fresh data with cache buster $(date +%s)"
            else
              git commit -m "üìà Stats auto-update [$(date +'%H:%M MSK')]" \
                         -m "Incremental refresh"
            fi
            git push
          else
            echo "No changes detected in README.md"
          fi
