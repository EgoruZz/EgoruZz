name: WakaTime Sync
concurrency:
  group: wakatime-sync-${{ github.ref }}
  cancel-in-progress: false

on:
  schedule:
    - cron: "30 0 * * *"
  workflow_dispatch:
    inputs:
      force-refresh:
        description: 'Force full refresh (ignore cache)'
        required: false
        default: 'false'

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Fetch and process stats
        id: process-stats
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          # Progress bar function with minimum 1% for non-zero values
          generate_progress_bar() {
            local percent=${1%.*}
            # Ensure at least 1% for any non-zero value
            if [[ $percent -eq 0 ]]; then
              percent=0
            elif [[ $percent -lt 1 ]]; then
              percent=1
            fi
            local filled=$((percent/5))
            local empty=$((20-filled))
            printf "▰%.0s" $(seq 1 $filled)
            printf "▱%.0s" $(seq 1 $empty)
            printf " %3d%%" $percent
          }

          # Get WakaTime data with better error handling
          API_URL="https://wakatime.com/api/v1/users/current/stats/last_7_days?api_key=$WAKATIME_API_KEY"
          echo "::group::Fetching WakaTime data"
          curl -sS --retry 3 --retry-delay 2 "$API_URL" > wakatime.json
          echo "::endgroup::"

          # Check if data exists
          if ! jq -e '.data.days' wakatime.json >/dev/null 2>&1; then
            echo "::error::No daily data found in WakaTime response"
            exit 1
          fi

          # Process data with defaults
          total_seconds=$(jq -r '.data.total_seconds // 0' wakatime.json)
          daily_avg=$(jq -r '.data.human_readable_daily_average // "0 mins"' wakatime.json)
          best_day=$(jq -r '.data.best_day.text // "0 mins"' wakatime.json)
          best_day_date=$(jq -r '.data.best_day.date? // ""' wakatime.json)
          languages=$(jq -r '.data.languages[0].name? // "None"' wakatime.json)
          os=$(jq -r '.data.operating_systems[0].name? // "None"' wakatime.json)
          categories=$(jq -r '.data.categories[0].name? // "None"' wakatime.json)
          editors=$(jq -r '.data.editors[0].name? // "None"' wakatime.json)

          # Generate dates for last 7 days
          dates=()
          for i in {6..0}; do
            dates+=("$(date -d "$i days ago" +'%Y-%m-%d')")
          done

          # Create associative array for day data with proper initialization
          declare -A day_data
          for date in "${dates[@]}"; do
            day_data["$date"]="0 mins|0"
          done

          # Parse actual data from API
          while IFS='|' read -r date text percent; do
            if [[ -n "$date" && -n "$text" && -n "$percent" ]]; then
              day_data["$date"]="$text|$percent"
            fi
          done < <(jq -r '.data.days[] | select(.text != null and .percent != null) | "\(.date)|\(.text)|\(.percent)"' wakatime.json 2>/dev/null)

          # Calculate max time for normalization
          max_time_seconds=$(jq -r '[.data.days[].total_seconds] | max' wakatime.json 2>/dev/null || echo 0)
          if [[ $max_time_seconds -eq 0 ]]; then
            max_time_seconds=1 # avoid division by zero
          fi

          # Generate report
          echo "<!--START_SECTION:waka-->" > stats.md
          echo "<div align='center'>" >> stats.md
          echo "" >> stats.md
          echo "## ⏳ WakaTime Weekly Report" >> stats.md
          echo "" >> stats.md
          
          # Report Info table
          echo "### 📌 Report Info" >> stats.md
          echo "" >> stats.md
          echo "| Period | Range |" >> stats.md
          echo "|--------|-------|" >> stats.md
          echo "| Last 7 Days | $(date -d '6 days ago' +'%Y-%m-%d') → $(date +'%Y-%m-%d') |" >> stats.md
          echo "| Last Updated | $(date -u +'%Y-%m-%d %H:%M') UTC |" >> stats.md
          echo "" >> stats.md
          
          # Weekly coding activity with proper normalization
          echo "### 📅 Weekly Coding Activity" >> stats.md
          echo "" >> stats.md
          echo "| Day       | Time   | Progress       |" >> stats.md
          echo "|-----------|--------|----------------|" >> stats.md
          
          for date in "${dates[@]}"; do
            day_name=$(date -d "$date" +"%a")
            IFS='|' read -r text percent <<< "${day_data[$date]}"
            
            # Calculate normalized percent based on actual seconds if available
            seconds=$(jq -r ".data.days[] | select(.date == \"$date\") | .total_seconds" wakatime.json 2>/dev/null || echo 0)
            normalized_percent=$(echo "scale=2; $seconds * 100 / $max_time_seconds" | bc)
            
            # Ensure we have at least some text representation
            if [[ "$text" == "0"* ]]; then
              text="0 mins"
            fi
            
            progress_bar=$(generate_progress_bar ${normalized_percent%.*})
            printf "| %-9s | %-6s | %-14s |\n" "$day_name" "$text" "$progress_bar" >> stats.md
          done
          echo "" >> stats.md
          
          # Coding statistics
          echo "### 📊 Coding Statistics" >> stats.md
          echo "" >> stats.md
          echo "| Metric | Value | Progress |" >> stats.md
          echo "|--------|-------|----------|" >> stats.md
          printf "| Daily Average | %s | %s |\n" "$daily_avg" "$(generate_progress_bar $(echo "$daily_avg" | awk '{print $1}'))" >> stats.md
          printf "| Top Category | %s | %s |\n" "$categories" "$(generate_progress_bar 75)" >> stats.md
          printf "| Productivity | %s | %s |\n" "$(jq -r '.data.human_readable_total_including_other_language // "N/A"' wakatime.json)" "$(generate_progress_bar 60)" >> stats.md
          echo "" >> stats.md
          
          # Top Languages
          echo "### 🚀 Top Languages" >> stats.md
          echo "" >> stats.md
          echo "| Language | Time | Usage |" >> stats.md
          echo "|----------|------|-------|" >> stats.md
          jq -r '.data.languages[0:5] | .[] | "\(.name)|\(.text)|\(.percent)"' wakatime.json 2>/dev/null | while IFS='|' read -r name text percent; do
            printf "| %s | %s | %s |\n" "$name" "$text" "$(generate_progress_bar ${percent%.*})" >> stats.md
          done
          echo "" >> stats.md
          
          # Code Insights
          echo "### 🔍 Code Insights" >> stats.md
          echo "" >> stats.md
          echo "| Insight | Value |" >> stats.md
          echo "|---------|-------|" >> stats.md
          echo "| 🏆 Most Productive Day | $best_day on ${best_day_date:-N/A} |" >> stats.md
          echo "| 💎 Top Language | $languages |" >> stats.md
          echo "| 🖥️ Operating System | $os |" >> stats.md
          echo "| ⌨️ Preferred Editor | $editors |" >> stats.md
          echo "| 📊 Total Coding Time | $(jq -r '.data.human_readable_total // "0 mins"' wakatime.json) |" >> stats.md
          echo "| 📈 Best Day Time | $best_day |" >> stats.md
          echo "| 📅 Days Active | $(jq -r '.data.days_including_holidays // 0' wakatime.json)/7 |" >> stats.md
          echo "" >> stats.md
          
          echo "</div>" >> stats.md
          echo "<!--END_SECTION:waka-->" >> stats.md

          # Update README
          sed -i '/<!--START_SECTION:waka-->/,/<!--END_SECTION:waka-->/{
              /<!--START_SECTION:waka-->/r stats.md
              d
          }' README.md
          
          echo "stats-generated=true" >> $GITHUB_OUTPUT
          rm -f stats.md wakatime.json

      - name: Commit and push changes
        if: steps.process-stats.outputs.stats-generated == 'true'
        run: |
          if git diff --quiet --exit-code README.md; then
            echo "::notice::No changes detected in README.md"
            exit 0
          fi

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          git commit -m "📊 Update WakaTime stats [$(date +'%Y-%m-%d %H:%M')]"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git pull --rebase
          git push origin main
