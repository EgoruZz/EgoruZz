name: WakaTime Sync
concurrency:
  group: wakatime-sync-${{ github.ref }}
  cancel-in-progress: false

on:
  schedule:
    - cron: "0 0 * * *"  # Every day at 00:00 UTC (03:00 MSK)
  workflow_dispatch:
    inputs:
      force-refresh:
        description: 'Force full refresh (ignore cache)'
        required: false
        default: 'false'

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Fetch and process stats
        id: process-stats
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          # Function for progress bars with improved visual style
          generate_progress_bar() {
            local value=${1:-0}
            local max=${2:-100}
            local size=${3:-24}  # Increased size for progress bars
            local percentage=$(( value * 100 / max ))
            local progress=$(( percentage * size / 100 ))
            local remainder=$(( size - progress ))
            printf -v bar "%${progress}s" ""
            printf -v remainder "%${remainder}s" ""
            echo "${bar// /█}${remainder// /░} ${percentage}%"
          }

          # Center-align text in a field
          center_text() {
            local width=$1
            local text=$2
            local padding=$(( (width - ${#text}) / 2 ))
            printf "%*s%s%*s" $padding "" "$text" $padding ""
          }

          # Generate dates for last 7 days
          dates=()
          for i in {6..0}; do
            dates+=("$(date -d "$i days ago" +'%Y-%m-%d')")
          done

          # Get WakaTime data
          API_URL="https://wakatime.com/api/v1/users/current/stats/last_7_days?api_key=$WAKATIME_API_KEY"
          echo "::group::Fetching WakaTime data"
          curl -sS --retry 3 --retry-delay 2 "$API_URL" > wakatime.json
          echo "::endgroup::"

          # Process data
          total_seconds=$(jq -r '.data.total_seconds // 0' wakatime.json)
          total_time=$(jq -r '.data.human_readable_total // "0 secs"' wakatime.json)
          daily_avg=$(jq -r '.data.human_readable_daily_average // "0 secs"' wakatime.json)
          best_day=$(jq -r '.data.best_day.text // "0 secs"' wakatime.json)
          best_day_date=$(jq -r '.data.best_day.date // ""' wakatime.json)
          languages=$(jq -r '.data.languages[0].name // "None"' wakatime.json)
          editors=$(jq -r '.data.editors[0].name // "None"' wakatime.json)
          
          # Generate report with smaller font size
          echo '```text' >> stats.md
          echo "⏳ LAST 7 DAYS » $(date -d '6 days ago' +'%Y-%m-%d') → $(date +'%Y-%m-%d')" >> stats.md
          echo "🔄 Updated: $(date +'%Y-%m-%d %H:%M') (MSK)" >> stats.md
          echo "" >> stats.md
          
          # Enhanced metrics table with wider columns
          echo "📊 CODING STATISTICS" >> stats.md
          echo "┌──────────────────────┬──────────────────────────┐" >> stats.md
          echo "│$(center_text 22 "Metric")│$(center_text 24 "Value")│" >> stats.md
          echo "├──────────────────────┼──────────────────────────┤" >> stats.md
          printf "│ %-20s │ %-22s │\n" "$(center_text 20 "Total Coding Time")" "$(center_text 22 "$total_time")" >> stats.md
          printf "│ %-20s │ %-22s │\n" "$(center_text 20 "Daily Average")" "$(center_text 22 "$daily_avg")" >> stats.md
          printf "│ %-20s │ %-22s │\n" "$(center_text 20 "Best Day")" "$(center_text 22 "$best_day ($(date -d "$best_day_date" +'%a'))")" >> stats.md
          printf "│ %-20s │ %-22s │\n" "$(center_text 20 "Top Language")" "$(center_text 22 "$languages")" >> stats.md
          printf "│ %-20s │ %-22s │\n" "$(center_text 20 "Primary Editor")" "$(center_text 22 "$editors")" >> stats.md
          printf "│ %-20s │ %-22s │\n" "$(center_text 20 "Current Day")" "$(center_text 22 "$(date +'%A')")" >> stats.md
          echo "└──────────────────────┴──────────────────────────┘" >> stats.md
          echo "" >> stats.md
          
          # Daily breakdown with wider columns
          echo "📅 DAILY BREAKDOWN" >> stats.md
          echo "┌────────────┬────────────┬──────────────────────────┐" >> stats.md
          echo "│$(center_text 12 "Day")│$(center_text 12 "Time")│$(center_text 26 "Activity")│" >> stats.md
          echo "├────────────┼────────────┼──────────────────────────┤" >> stats.md
          
          # Create associative array of day data
          declare -A day_data
          while IFS='|' read -r date text percent; do
            day_data["$date"]="$text|$percent"
          done < <(jq -r '.data.days[] | "\(.date)|\(.text)|\(.percent // 0)"' wakatime.json 2>/dev/null)
          
          # Display all 7 days with short names
          for date in "${dates[@]}"; do
            day_name=$(date -d "$date" +"%a")
            if [[ -n "${day_data[$date]}" ]]; then
              IFS='|' read -r text percent <<< "${day_data[$date]}"
            else
              text="0 secs"
              percent=0
            fi
            printf "│ %-10s │ %-10s │ %-24s │\n" "$(center_text 10 "$day_name")" "$(center_text 10 "$text")" "$(generate_progress_bar ${percent%.*} 100)" >> stats.md
          done
          
          echo "└────────────┴────────────┴──────────────────────────┘" >> stats.md
          echo "" >> stats.md

          # Top 5 Technologies section with wider columns
          echo "🚀 TOP 5 TECHNOLOGIES" >> stats.md
          echo "┌────────────────┬────────────┬──────────────────────────┐" >> stats.md
          echo "│$(center_text 16 "Technology")│$(center_text 12 "Time")│$(center_text 26 "Usage")│" >> stats.md
          echo "├────────────────┼────────────┼──────────────────────────┤" >> stats.md
          
          # Get top 5 languages
          jq -r '.data.languages[0:5] | .[] | "\(.name)|\(.text)|\(.percent)"' wakatime.json 2>/dev/null | while IFS='|' read -r name text percent; do
            printf "│ %-14s │ %-10s │ %-24s │\n" "$(center_text 14 "${name:0:14}")" "$(center_text 10 "$text")" "$(generate_progress_bar ${percent%.*} 100)" >> stats.md
          done
          
          echo "└────────────────┴────────────┴──────────────────────────┘" >> stats.md
          echo '```' >> stats.md

          # Update README
          sed -i '/<!--START_SECTION:waka-->/,/<!--END_SECTION:waka-->/{
              /<!--START_SECTION:waka-->/r stats.md
              d
          }' README.md
          
          # Set outputs
          echo "stats-generated=true" >> $GITHUB_OUTPUT
          rm -f stats.md wakatime.json

      - name: Commit and push changes
        if: steps.process-stats.outputs.stats-generated == 'true'
        run: |
          if git diff --quiet --exit-code README.md; then
            echo "::notice::No changes detected in README.md"
            exit 0
          fi

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          git commit -m "📊 Update WakaTime stats [$(date +'%Y-%m-%d %H:%M')]"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git pull --rebase
          git push origin main
