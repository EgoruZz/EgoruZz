name: WakaTime Sync
concurrency:
  group: waka-sync-${{ github.ref }}
  cancel-in-progress: false

on:
  schedule:
    - cron: "30 0 * * *"
  workflow_dispatch:
    inputs:
      force-refresh:
        description: 'Force full refresh (ignore cache)'
        required: false
        default: 'false'

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Fetch and process stats
        id: process-stats
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          # –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã
          convert_to_minutes() {
            local time_str="$1"
            if [[ $time_str == *"hrs"* && $time_str == *"mins"* ]]; then
              hours=$(echo "$time_str" | awk '{print $1}')
              minutes=$(echo "$time_str" | awk '{print $3}')
              echo $((hours * 60 + minutes))
            elif [[ $time_str == *"hrs"* ]]; then
              hours=$(echo "$time_str" | awk '{print $1}')
              echo $((hours * 60))
            elif [[ $time_str == *"mins"* ]]; then
              minutes=$(echo "$time_str" | awk '{print $1}')
              echo "$minutes"
            else
              echo 0
            fi
          }

          generate_progress_bar() {
            local minutes=$1
            local max=$2
            local length=20  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª–∏–Ω—É (10-20 —Å–∏–º–≤–æ–ª–æ–≤)
            local percent=$((minutes * 100 / max))
            percent=$((percent > 100 ? 100 : percent))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 100%

            local filled=$((percent * length / 100))
            local empty=$((length - filled))

            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ filled –∏ empty –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ
            filled=$((filled < 0 ? 0 : filled))
            empty=$((empty < 0 ? 0 : empty))

            printf "["
            printf "‚ñ∞%.0s" $(seq 1 $filled)    # –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
            printf "‚ñ±%.0s" $(seq 1 $empty)     # –ü—É—Å—Ç—ã–µ –±–ª–æ–∫–∏
            printf "] %3d%%" "$percent"        # –ü—Ä–æ—Ü–µ–Ω—Ç
          }

          # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö WakaTime
          API_URL="https://wakatime.com/api/v1/users/current/stats/last_7_days?api_key=$WAKATIME_API_KEY"
          echo "::group::Fetching WakaTime data"
          curl -sS --retry 3 --retry-delay 2 "$API_URL" > wakatime.json
          echo "::endgroup::"

          # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
          total_seconds=$(jq -r '.data.total_seconds // 0' wakatime.json)
          daily_avg=$(jq -r '.data.human_readable_daily_average // "0 secs"' wakatime.json)
          best_day=$(jq -r '.data.best_day.text // "0 secs"' wakatime.json)
          best_day_date=$(jq -r '.data.best_day.date // ""' wakatime.json)
          languages=$(jq -r '.data.languages[0].name // "None"' wakatime.json)
          os=$(jq -r '.data.operating_systems[0].name // "None"' wakatime.json)
          categories=$(jq -r '.data.categories[0].name // "None"' wakatime.json)
          editors=$(jq -r '.data.editors[0].name // "None"' wakatime.json)
          
          # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã
          daily_minutes=$(convert_to_minutes "$daily_avg")
          best_day_minutes=$(convert_to_minutes "$best_day")
          total_minutes=$(convert_to_minutes "$(jq -r '.data.human_readable_total // "0 secs"' wakatime.json)")

          # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
          echo "<!--START_SECTION:waka-->" > stats.md
          echo "<div align='center'>" >> stats.md
          echo "" >> stats.md
          echo "## ‚è≥ WakaTime Weekly Report" >> stats.md
          echo "" >> stats.md
          
          # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—á—ë—Ç–µ
          echo "### üìå Report Info" >> stats.md
          echo "" >> stats.md
          echo "| Period | Range |" >> stats.md
          echo "|--------|-------|" >> stats.md
          echo "| Last 7 Days | $(date -d '7 days ago' +'%Y-%m-%d') ‚Üí $(date -d 'yesterday' +'%Y-%m-%d') |" >> stats.md
          echo "| Last Updated | $(date -u +'%Y-%m-%d %H:%M') UTC |" >> stats.md
          echo "" >> stats.md
          
          # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–¥–∏–Ω–≥–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
          echo "### üìä Coding Statistics" >> stats.md
          echo "" >> stats.md
          echo "| Metric | Value | Progress |" >> stats.md
          echo "|--------|-------|----------|" >> stats.md
          printf "| Daily Average | %s | %s |\n" "$daily_avg" "$(generate_progress_bar $daily_minutes 1440)" >> stats.md
          printf "| Best Day | %s on %s | %s |\n" "$best_day" "$best_day_date" "$(generate_progress_bar $best_day_minutes 1440)" >> stats.md
          printf "| Total Time | %s | %s |\n" "$(jq -r '.data.human_readable_total // "0 secs"' wakatime.json)" "$(generate_progress_bar $total_minutes 10080)" >> stats.md
          printf "| Productivity | %s mins/day | %s |\n" "$(echo "scale=1; $total_minutes/7" | bc)" "$(generate_progress_bar $((total_minutes/7)) 240)" >> stats.md
          echo "" >> stats.md
          
          # –¢–æ–ø —è–∑—ã–∫–æ–≤ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
          echo "### üöÄ Top Languages" >> stats.md
          echo "" >> stats.md
          echo "| Language | Time | Usage |" >> stats.md
          echo "|----------|------|-------|" >> stats.md
          jq -r '.data.languages[0:5] | .[] | "\(.name)|\(.text)|\(.percent)"' wakatime.json 2>/dev/null | while IFS='|' read -r name text percent; do
            lang_minutes=$(convert_to_minutes "$text")
            printf "| %s | %s | %s |\n" "$name" "$text" "$(generate_progress_bar $lang_minutes 1440)" >> stats.md
          done
          echo "" >> stats.md
          
          # –ò–Ω—Å–∞–π—Ç—ã
          echo "### üîç Code Insights" >> stats.md
          echo "" >> stats.md
          echo "| Insight | Value |" >> stats.md
          echo "|---------|-------|" >> stats.md
          echo "| üíé Top Language | $languages |" >> stats.md
          echo "| üñ•Ô∏è OS | $os |" >> stats.md
          echo "| ‚å®Ô∏è Editor | $editors |" >> stats.md
          echo "| üìä Category | $categories |" >> stats.md
          echo "" >> stats.md
          
          echo "</div>" >> stats.md
          echo "<!--END_SECTION:waka-->" >> stats.md

          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ README
          sed -i '/<!--START_SECTION:waka-->/,/<!--END_SECTION:waka-->/{
              /<!--START_SECTION:waka-->/r stats.md
              d
          }' README.md
          
          echo "stats-generated=true" >> $GITHUB_OUTPUT
          rm -f stats.md wakatime.json

      - name: Commit and push changes
        if: steps.process-stats.outputs.stats-generated == 'true'
        run: |
          if git diff --quiet --exit-code README.md; then
            echo "::notice::No changes detected in README.md"
            exit 0
          fi

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          git commit -m "üìä Update WakaTime stats [$(date +'%Y-%m-%d %H:%M')]"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git pull --rebase
          git push origin main
