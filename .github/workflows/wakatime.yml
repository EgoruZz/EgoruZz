name: WakaTime Sync
concurrency:
  group: "wakatime-sync-${{ github.ref }}"
  cancel-in-progress: false

on:
  schedule:
    - cron: "10 0 * * 1"  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 00:10 UTC (03:10 –ú–°–ö)
    - cron: "0 */3 * * *" # –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –≤ :00
  workflow_dispatch:

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log trigger info
        run: |
          echo "::group::Trigger details"
          echo "Event: ${{ github.event_name }}"
          echo "Schedule: ${{ github.event.schedule || 'Manual' }}"
          echo "UTC Time: $(date -u)"
          echo "::endgroup::"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc figlet toilet
          sudo npm install -g cowsay || sudo apt-get install -y cowsay || echo "Cowsay not available"
          sudo apt-get install -y fortune-mod || echo "Fortune not available"

      - name: Fetch and process stats
        env:
          WAKATIME_API_KEY: "${{ secrets.WAKATIME_API_KEY }}"
        run: |
          # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞—Ä—á–∞—Ä—Ç–æ–≤
          generate_bar() {
            local percent=$(( $1 < 0 ? 0 : ($1 > 100 ? 100 : $1 )))
            local filled=$((percent/10))
            local empty=$((10-filled))
            printf -v bar '%*s' "$filled"
            bar=${bar// /‚ñì}
            printf -v empty_bar '%*s' "$empty"
            empty_bar=${empty_bar// /‚ñë}
            echo "${bar}${empty_bar} $percent%"
          }

          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
          if [ "${{ github.event_name }}" = "schedule" ] && [ "${{ github.event.schedule }}" = "10 0 * * 1" ]; then
            CACHE_BUSTER=$(date +%s)
            REPORT_TYPE="üöÄ WEEKLY RESET"
            HEADER_STYLE=$(toilet -f term -F border --gay 'WEEKLY RESET' 2>/dev/null || echo 'WEEKLY CODING REPORT')
            DATE_RANGE="$(date -d 'last monday' +'%Y-%m-%d') ‚Üí $(date -d 'last sunday' +'%Y-%m-%d')"
            echo "::notice::Weekly reset mode activated"
          else
            CACHE_BUSTER="cache"
            REPORT_TYPE="üìà AUTO UPDATE"
            HEADER_STYLE=$(figlet -f slant 'Code Pulse' 2>/dev/null || echo 'CODING STATS')
            DATE_RANGE="$(date -d '7 days ago' +'%Y-%m-%d') ‚Üí $(date +'%Y-%m-%d')"
          fi

          # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          API_URL="https://wakatime.com/api/v1/users/current/stats/last_7_days?api_key=$WAKATIME_API_KEY&cache_buster=$CACHE_BUSTER"
          echo "::group::Fetching WakaTime data"
          curl -s "$API_URL" > wakatime.json
          jq . wakatime.json
          echo "::endgroup::"

          if ! jq -e '.data' wakatime.json >/dev/null; then
            echo "::error::WakaTime API request failed"
            {
              echo '```text'
              echo "‚ö†Ô∏è WAKATIME API ERROR"
              echo "‚è≥ $REPORT_TYPE ¬ª $DATE_RANGE"
              echo "üîÑ Last sync attempt: $(date +'%Y-%m-%d %H:%M') (MSK)"
              echo "üîó Response Code: $(curl -s -o /dev/null -w '%{http_code}' "$API_URL")"
              echo '```'
            } > stats.md
          else
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            total_seconds=$(jq -r '.data.total_seconds // 0' wakatime.json)
            best_day_seconds=$(jq -r '.data.best_day.total_seconds // 0' wakatime.json)
            productivity=$(echo "scale=1; $best_day_seconds * 100 / ($total_seconds + 1)" | bc)

            # –§–æ—Ä–º–∏—Ä—É–µ–º Markdown –æ—Ç—á–µ—Ç
            {
              echo '```text'
              echo "$HEADER_STYLE"
              echo "‚è≥ $REPORT_TYPE ¬ª $DATE_RANGE"
              echo "üîÑ Last sync: $(date +'%Y-%m-%d %H:%M') (MSK)"
              echo ""
              
              echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
              echo "‚ïë          üìä CODING ANALYTICS             ‚ïë"
              echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
              printf "‚ïë Total Time        ‚ïë %19s ‚ïë\n" "$(jq -r '.data.human_readable_total // "0 secs"' wakatime.json)"
              echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
              printf "‚ïë Daily Avg         ‚ïë %19s ‚ïë\n" "$(jq -r '.data.human_readable_daily_average // "0 secs"' wakatime.json)"
              echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
              printf "‚ïë Best Day          ‚ïë %19s ‚ïë\n" "$(jq -r '(.data.best_day.text // "0 secs") + " (" + (.data.best_day.date // "N/A") + ")"" wakatime.json)"
              echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
              printf "‚ïë Productivity Peak ‚ïë %19s ‚ïë\n" "$(generate_bar "${productivity%.*}")"
              echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
              echo ""
              
              echo "üî• TOP 5 TECHNOLOGIES"
              jq -r '.data.languages[0:5] | .[]? | "‚ñå \(.name): \(.text) \((.percent|floor)*100/100)%\n  \(generate_bar (.percent|floor))"' wakatime.json
              echo ""
              
              echo "üìÖ WEEKLY ACTIVITY"
              echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
              echo "‚îÇ Day   ‚îÇ Coding Time  ‚îÇ Activity Graph   ‚îÇ"
              echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
              jq -r '.data.days | to_entries? | .[]? | "‚îÇ \(.key[:3])   ‚îÇ \(.value.text) ‚îÇ \(generate_bar (.value.percent|floor)) ‚îÇ"' wakatime.json
              echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
              echo ""
              
              # –°–ª—É—á–∞–π–Ω—ã–π ASCII-–∞—Ä—Ç
              if command -v cowsay >/dev/null && command -v fortune >/dev/null; then
                cowfile=$(ls /usr/share/cowsay/cows/ | shuf -n 1)
                fortune_text=$(fortune -s 2>/dev/null || echo "Keep coding!")
                cowsay -f "$cowfile" "$fortune_text" 2>/dev/null
              else
                echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
                echo "‚îÇ Today is $(date +%A) - perfect day to code! ‚îÇ"
                echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
              fi
              echo '```'
            } > stats.md
          fi

          # –û–±–Ω–æ–≤–ª—è–µ–º README
          sed -i '/<!--START_SECTION:waka-->/,/<!--END_SECTION:waka-->/{
              /<!--START_SECTION:waka-->/r stats.md
              d
          }' README.md
          
          rm -f stats.md wakatime.json

      - name: Commit and push changes
        run: |
          if git diff --quiet --exit-code README.md; then
            echo "::notice::No changes detected in README.md"
            exit 0
          fi
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          
          if [ "${{ github.event_name }}" = "schedule" ] && [ "${{ github.event.schedule }}" = "10 0 * * 1" ]; then
            git commit -m "üöÄ Weekly stats reset [$(date +%Y-%m-%d)]" \
                       -m "Fresh week start | Cache buster: $(date +%s)"
          else
            git commit -m "üìà Stats auto-update [$(date +%H:%M MSK)]" \
                       -m "Incremental refresh | Trigger: ${{ github.event_name }}"
          fi
          
          git pull --rebase
          git push
          echo "::notice::Changes committed successfully"
