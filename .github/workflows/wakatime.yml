name: WakaTime Sync
concurrency:
  group: wakatime-sync-${{ github.ref }}
  cancel-in-progress: false

on:
  schedule:
    - cron: "10 0 * * 1"  # Monday at 00:10 UTC (03:10 MSK)
    - cron: "0 */3 * * *" # Every 3 hours at :00
  workflow_dispatch:
    inputs:
      force-refresh:
        description: 'Force full refresh (ignore cache)'
        required: false
        default: 'false'

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc
          command -v cowsay >/dev/null 2>&1 || sudo apt-get install -y cowsay

      - name: Fetch and process stats
        id: process-stats
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
          generate_progress_bar() {
            local value=${1:-0}
            local max=${2:-100}
            local size=${3:-20}
            local percentage=$(( value * 100 / max ))
            local progress=$(( percentage * size / 100 ))
            local remainder=$(( size - progress ))
            printf -v bar "%${progress}s" ""
            printf -v remainder "%${remainder}s" ""
            echo "${bar// /‚ñá}${remainder// /‚ñë} ${percentage}%"
          }

          # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
          API_URL="https://wakatime.com/api/v1/users/current/stats?api_key=$WAKATIME_API_KEY&range=week"
          echo "::group::–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö WakaTime"
          curl -sS --retry 3 --retry-delay 2 "$API_URL" -o wakatime.json || {
            echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö WakaTime"
            exit 1
          }

          # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
          DEFAULT_DATA='{
            "data": {
              "human_readable_total": "0 secs",
              "human_readable_daily_average": "0 secs",
              "best_day": {"text": "0 secs", "date": "N/A"},
              "days": [],
              "languages": []
            }
          }'

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
          if ! jq -e '.data' wakatime.json >/dev/null 2>&1; then
            echo "$DEFAULT_DATA" > wakatime.json
          else
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            jq -r --argjson default "$DEFAULT_DATA" '.data = (.data + $default.data)' wakatime.json > temp.json && mv temp.json wakatime.json
          fi
          echo "::endgroup::"

          # Process data
          total_seconds=$(jq -r '.data.total_seconds // 0' wakatime.json)
          best_day_seconds=$(jq -r '.data.best_day.total_seconds // 0' wakatime.json)
          productivity=$(echo "scale=1; $best_day_seconds * 100 / ($total_seconds + 1)" | bc)
          active_days=$(jq -r '[.data.days[] | select(.total_seconds > 0)] | length' wakatime.json)

          # Generate report
          echo '```text' > stats.md
          echo "### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–¥–∏–Ω–≥–∞" >> stats.md
          echo "This Week Wakatime ¬ª $(date -d 'last monday' +'%Y-%m-%d') ‚Üí $(date -d 'this sunday' +'%Y-%m-%d')" >> stats.md
          echo "üîÑ Last sync: $(date +'%Y-%m-%d %H:%M') (MSK)" >> stats.md
          echo "" >> stats.md
          
          # Main stats
          echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" >> stats.md
          echo "‚îÇ        Metric           ‚îÇ        Value          ‚îÇ" >> stats.md
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
          printf "‚îÇ Total Time             ‚îÇ %21s ‚îÇ\n" "$(jq -r '.data.human_readable_total' wakatime.json)" >> stats.md
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
          printf "‚îÇ Daily Avg              ‚îÇ %21s ‚îÇ\n" "$(jq -r '.data.human_readable_daily_average' wakatime.json)" >> stats.md
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
          printf "‚îÇ Best Day               ‚îÇ %21s ‚îÇ\n" "$(jq -r '(.data.best_day.text) + " (" + (.data.best_day.date) + ")"' wakatime.json)" >> stats.md
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
          printf "‚îÇ Productivity           ‚îÇ %21s ‚îÇ\n" "$(generate_progress_bar ${productivity%.*} 100 20)" >> stats.md
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
          printf "‚îÇ Active Days            ‚îÇ %21s ‚îÇ\n" "$active_days/7 days" >> stats.md
          echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" >> stats.md
          echo "" >> stats.md
          
          # Weekly activity in Russian
          echo "üìÖ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú" >> stats.md
          echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" >> stats.md
          echo "‚îÇ –î–µ–Ω—å  ‚îÇ –í—Ä–µ–º—è –∫–æ–¥–∏–Ω–≥–∞  ‚îÇ –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏  ‚îÇ" >> stats.md
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
          
          # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
          DAYS_ORDER=("Mon" "Tue" "Wed" "Thu" "Fri" "Sat" "Sun")
          for day in "${DAYS_ORDER[@]}"; do
            day_data=$(jq -r --arg day "$day" '.data.days[] | select(.name == $day) // {"text": "0 mins", "percent": 0, "name": $day}' wakatime.json)
            text=$(jq -r '.text' <<< "$day_data")
            percent=$(jq -r '.percent | floor' <<< "$day_data")
            
            case $day in
              "Mon") ru_day="–ü–Ω";; "Tue") ru_day="–í—Ç";; "Wed") ru_day="–°—Ä";;
              "Thu") ru_day="–ß—Ç";; "Fri") ru_day="–ü—Ç";; "Sat") ru_day="–°–±";;
              "Sun") ru_day="–í—Å";; *) ru_day="$day";;
            esac
            
            printf "‚îÇ %-4s ‚îÇ %-14s ‚îÇ %-20s ‚îÇ\n" "$ru_day" "$text" "$(generate_progress_bar $percent 100 20)"
          done >> stats.md
          
          echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" >> stats.md
          echo "" >> stats.md
          
          # Top technologies section
          echo "TOP 5 TECHNOLOGIES" >> stats.md
          jq -r '.data.languages[0:5] | .[]? | select(.name != null) | "\(.name)|\(.text)|\(.percent|floor)"' wakatime.json | 
          while IFS='|' read -r name text percent; do
            echo "‚ñå $name: $text ($percent%)" >> stats.md
            echo "  $(generate_progress_bar $percent 100 20)" >> stats.md
          done
          echo '```' >> stats.md

          # Update README
          sed -i '/<!--START_SECTION:waka-->/,/<!--END_SECTION:waka-->/{
              /<!--START_SECTION:waka-->/r stats.md
              d
          }' README.md
          
          # Set outputs
          echo "stats-generated=true" >> $GITHUB_OUTPUT
          rm -f stats.md wakatime.json

      - name: Commit and push changes
        if: steps.process-stats.outputs.stats-generated == 'true'
        run: |
          if git diff --quiet --exit-code README.md; then
            echo "::notice::No changes detected in README.md"
            exit 0
          fi

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          
          if [[ "${{ github.event_name }}" == "schedule" ]] && [[ "${{ github.event.schedule }}" == "10 0 * * 1" ]] || 
             [[ "${{ inputs.force-refresh }}" == "true" ]]; then
            git commit -m "üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ [$(date +'%Y-%m-%d')]" \
                       -m "–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏ | Cache buster: $(date +%s)"
          else
            git commit -m "üìà –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ [$(date +'%H:%M MSK')]" \
                       -m "–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ | –¢—Ä–∏–≥–≥–µ—Ä: ${{ github.event_name }}"
          fi
          
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git pull --rebase
          git push origin main
