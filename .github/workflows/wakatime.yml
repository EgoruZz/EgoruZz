name: WakaTime Sync
concurrency:
  group: wakatime-sync-${{ github.ref }}
  cancel-in-progress: false

on:
  schedule:
    - cron: "30 0 * * *"
  workflow_dispatch:
    inputs:
      force-refresh:
        description: 'Force full refresh (ignore cache)'
        required: false
        default: 'false'

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Fetch and process stats
        id: process-stats
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          # Improved progress bar function
          generate_progress_bar() {
            local percent=${1%.*}
            # Ensure valid percentage (0-100)
            percent=$(( percent < 0 ? 0 : (percent > 100 ? 100 : percent) ))
            local filled=$((percent/5))
            local empty=$((20-filled))
            printf "▰%.0s" $(seq 1 $filled)
            printf "▱%.0s" $(seq 1 $empty)
            printf " %3d%%" $percent
          }

          # Get WakaTime data with better error handling
          API_URL="https://wakatime.com/api/v1/users/current/stats/last_7_days?api_key=$WAKATIME_API_KEY"
          echo "::group::Fetching WakaTime data"
          curl -sS --retry 3 --retry-delay 2 "$API_URL" > wakatime.json
          
          # Check if API returned valid data
          if ! jq -e '.data' wakatime.json >/dev/null 2>&1; then
            echo "::warning::WakaTime API response doesn't contain expected data structure"
            echo "stats-generated=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "::endgroup::"

          # Process data with defaults
          total_seconds=$(jq -r '.data.total_seconds // 0' wakatime.json)
          daily_avg=$(jq -r '.data.human_readable_daily_average // "0 mins"' wakatime.json)
          best_day=$(jq -r '.data.best_day.text // "0 mins"' wakatime.json)
          best_day_date=$(jq -r '.data.best_day.date? // ""' wakatime.json)
          languages=$(jq -r '.data.languages[0].name? // "None"' wakatime.json)
          os=$(jq -r '.data.operating_systems[0].name? // "None"' wakatime.json)
          categories=$(jq -r '.data.categories[0].name? // "None"' wakatime.json)
          editors=$(jq -r '.data.editors[0].name? // "None"' wakatime.json)

          # Generate dates for last 7 days
          dates=()
          for i in {6..0}; do
            dates+=("$(date -d "$i days ago" +'%Y-%m-%d')")
          done

          # Initialize day data with zeros
          declare -A day_data
          declare -A day_seconds
          total_active_days=0
          total_weekday_seconds=0
          weekday_count=0

          for date in "${dates[@]}"; do
            day_name=$(date -d "$date" +"%a")
            day_data["$date"]="0 mins|0"
            day_seconds["$date"]=0
            
            # Check if it's a weekday (Mon-Fri)
            if [[ $(date -d "$date" +%u) -lt 6 ]]; then
              weekday_count=$((weekday_count+1))
            fi
          done

          # Parse actual data from API
          while IFS='|' read -r date text seconds; do
            if [[ -n "$date" && -n "$text" && -n "$seconds" ]]; then
              day_data["$date"]="$text|$seconds"
              day_seconds["$date"]=$seconds
              
              if [[ $seconds -gt 0 ]]; then
                total_active_days=$((total_active_days+1))
              fi
              
              # Add to weekday average if it's a weekday
              if [[ $(date -d "$date" +%u) -lt 6 ]]; then
                total_weekday_seconds=$((total_weekday_seconds + seconds))
              fi
            fi
          done < <(jq -r '.data.days[] | select(.text != null and .total_seconds != null) | "\(.date)|\(.text)|\(.total_seconds)"' wakatime.json 2>/dev/null)

          # Calculate weekday average
          weekday_avg_seconds=0
          if [[ $weekday_count -gt 0 ]]; then
            weekday_avg_seconds=$((total_weekday_seconds / weekday_count))
          fi
          weekday_avg_text=$(printf "%dh %dm" $((weekday_avg_seconds/3600)) $((weekday_avg_seconds%3600/60)))

          # Calculate max time for normalization (use 1 hour as baseline if no activity)
          max_time_seconds=$(printf '%s\n' "${day_seconds[@]}" | sort -nr | head -1)
          if [[ $max_time_seconds -eq 0 ]]; then
            max_time_seconds=3600 # 1 hour as fallback
          fi

          # Generate report
          echo "<!--START_SECTION:waka-->" > stats.md
          echo "<div align='center'>" >> stats.md
          echo "" >> stats.md
          echo "## ⏳ WakaTime Weekly Report" >> stats.md
          echo "" >> stats.md
          
          # Report Info table with larger font
          echo "### 📌 <span style='font-size: 1.2em'>Report Info</span>" >> stats.md
          echo "" >> stats.md
          echo "<table style='font-size: 1.1em'>" >> stats.md
          echo "<tr><td><strong>Period</strong></td><td>$(date -d '6 days ago' +'%Y-%m-%d') → $(date +'%Y-%m-%d')</td></tr>" >> stats.md
          echo "<tr><td><strong>Last Updated</strong></td><td>$(date -u +'%Y-%m-%d %H:%M') UTC</td></tr>" >> stats.md
          echo "</table>" >> stats.md
          echo "" >> stats.md
          
          # Weekly coding activity with proper progress bars
          echo "### 📅 Weekly Coding Activity" >> stats.md
          echo "" >> stats.md
          echo "| Day       | Time   | Progress       |" >> stats.md
          echo "|-----------|--------|----------------|" >> stats.md
          
          for date in "${dates[@]}"; do
            day_name=$(date -d "$date" +"%a")
            IFS='|' read -r text seconds <<< "${day_data[$date]}"
            
            # Calculate normalized percentage
            percent=$(( seconds * 100 / max_time_seconds ))
            
            # Ensure we have at least some text representation
            if [[ "$text" == "0"* ]]; then
              text="0 mins"
            fi
            
            progress_bar=$(generate_progress_bar $percent)
            printf "| %-9s | %-6s | %-14s |\n" "$day_name" "$text" "$progress_bar" >> stats.md
          done
          echo "" >> stats.md
          
          # Coding statistics
          echo "### 📊 Coding Statistics" >> stats.md
          echo "" >> stats.md
          echo "| Metric | Value | Progress |" >> stats.md
          echo "|--------|-------|----------|" >> stats.md
          printf "| Daily Average | %s | %s |\n" "$daily_avg" "$(generate_progress_bar $(echo "$daily_avg" | awk '{print $1}'))" >> stats.md
          printf "| Weekday Average | %s | %s |\n" "$weekday_avg_text" "$(generate_progress_bar $((weekday_avg_seconds/60)))" >> stats.md
          printf "| Top Category | %s | %s |\n" "$categories" "$(generate_progress_bar 75)" >> stats.md
          echo "" >> stats.md
          
          # Top Languages
          echo "### 🚀 Top Languages" >> stats.md
          echo "" >> stats.md
          echo "| Language | Time | Usage |" >> stats.md
          echo "|----------|------|-------|" >> stats.md
          jq -r '.data.languages[0:5] | .[] | "\(.name)|\(.text)|\(.percent)"' wakatime.json 2>/dev/null | while IFS='|' read -r name text percent; do
            printf "| %s | %s | %s |\n" "$name" "$text" "$(generate_progress_bar ${percent%.*})" >> stats.md
          done
          echo "" >> stats.md
          
          # Code Insights (without Best Day Time)
          echo "### 🔍 Code Insights" >> stats.md
          echo "" >> stats.md
          echo "| Insight | Value |" >> stats.md
          echo "|---------|-------|" >> stats.md
          echo "| 🏆 Most Productive Day | ${best_day_date:-N/A} ($best_day) |" >> stats.md
          echo "| 💎 Top Language | $languages |" >> stats.md
          echo "| 🖥️ Operating System | $os |" >> stats.md
          echo "| ⌨️ Preferred Editor | $editors |" >> stats.md
          echo "| 📊 Total Coding Time | $(jq -r '.data.human_readable_total // "0 mins"' wakatime.json) |" >> stats.md
          echo "| 📅 Days Active | $total_active_days/7 |" >> stats.md
          echo "" >> stats.md
          
          echo "</div>" >> stats.md
          echo "<!--END_SECTION:waka-->" >> stats.md

          # Update README
          sed -i '/<!--START_SECTION:waka-->/,/<!--END_SECTION:waka-->/{
              /<!--START_SECTION:waka-->/r stats.md
              d
          }' README.md
          
          echo "stats-generated=true" >> $GITHUB_OUTPUT
          rm -f stats.md wakatime.json

      - name: Commit and push changes
        if: steps.process-stats.outputs.stats-generated == 'true'
        run: |
          if git diff --quiet --exit-code README.md; then
            echo "::notice::No changes detected in README.md"
            exit 0
          fi

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          git commit -m "📊 Update WakaTime stats [$(date +'%Y-%m-%d %H:%M')]"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git pull --rebase
          git push origin main
