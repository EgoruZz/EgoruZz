name: WakaTime Professional Stats
concurrency:
  group: wakatime-pro-${{ github.ref }}
  cancel-in-progress: false

on:
  schedule:
    - cron: "30 0 * * *"  # 00:30 UTC
  workflow_dispatch:

jobs:
  generate-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Generate Professional Stats
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          pip install requests
          python -c "
          import requests, json
          from datetime import datetime

          try:
              # Get WakaTime stats
              url = 'https://wakatime.com/api/v1/users/current/stats/last_7_days'
              headers = {'Authorization': f'Bearer $WAKATIME_API_KEY'}
              response = requests.get(url, headers=headers)
              response.raise_for_status()
              data = response.json()

              if 'data' not in data:
                  raise ValueError('Invalid API response - missing data')

              stats_data = data['data']

              # Helper function to format items
              def format_items(items, limit=5):
                  return ''.join([f'- {item[\"name\"]}: {item[\"text\"]} ({item[\"percent\"]}%)\n' for item in items[:limit]])

              # Generate markdown content
              languages = format_items(stats_data.get('languages', []), 5)
              editors = format_items(stats_data.get('editors', []), 3)
              os = format_items(stats_data.get('operating_systems', []), 2)
              projects = format_items(stats_data.get('projects', []), 3)

              stats_content = f'''
              ## WAKATIME DEVELOPMENT ANALYTICS (7-DAY REPORT)
              **Last Updated**: {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}

              ### SUMMARY
              - **Total Time**: {stats_data.get('human_readable_total', 'N/A')}
              - **Daily Average**: {stats_data.get('human_readable_daily_average', 'N/A')}
              - **Best Day**: {stats_data.get('best_day', {}).get('text', 'N/A')} ({stats_data.get('best_day', {}).get('date', 'N/A')})

              ### TIME DISTRIBUTION
              - **Coding**: {stats_data.get('categories', {}).get('coding', {}).get('text', 'N/A')} ({stats_data.get('categories', {}).get('coding', {}).get('percent', 'N/A')}%)
              - **Building**: {stats_data.get('categories', {}).get('building', {}).get('text', 'N/A')} ({stats_data.get('categories', {}).get('building', {}).get('percent', 'N/A')}%)
              - **Debugging**: {stats_data.get('categories', {}).get('debugging', {}).get('text', 'N/A')} ({stats_data.get('categories', {}).get('debugging', {}).get('percent', 'N/A')}%)

              ### LANGUAGES (TOP 5)
              {languages}

              ### DEVELOPMENT ENVIRONMENT
              **Editors**:
              {editors}

              **Operating Systems**:
              {os}

              ### PROJECTS (TOP 3)
              {projects}
              '''

              # Write to file
              with open('wakatime_stats.md', 'w') as f:
                  f.write(f'```markdown\n{stats_content}\n```')

              # Update README
              with open('README.md', 'r') as f:
                  readme_content = f.read()

              start_marker = '<!--START_SECTION:waka-->'
              end_marker = '<!--END_SECTION:waka-->'
              
              start_idx = readme_content.find(start_marker)
              end_idx = readme_content.find(end_marker)

              if start_idx != -1 and end_idx != -1:
                  new_content = (
                      readme_content[:start_idx] + 
                      start_marker + '\n' + 
                      open('wakatime_stats.md').read() + '\n' + 
                      end_marker + 
                      readme_content[end_idx + len(end_marker):]
                  )
                  
                  with open('README.md', 'w') as f:
                      f.write(new_content)

          except Exception as e:
              print(f'Error generating stats: {str(e)}')
              with open('wakatime_stats.md', 'w') as f:
                  f.write('```\nError generating WakaTime stats\n```')
          "

      - name: Commit changes
        run: |
          git config --global user.name "WakaTime Analytics"
          git config --global user.email "analytics@github.com"
          git add README.md
          git commit -m "ðŸ“ˆ Update WakaTime stats [skip ci]" || echo "No changes to commit"
          git push
