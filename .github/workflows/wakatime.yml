name: WakaTime Professional Stats
concurrency:
  group: wakatime-pro-${{ github.ref }}
  cancel-in-progress: false

on:
  schedule:
    - cron: "30 0 * * *"  # 00:30 UTC
  workflow_dispatch:

jobs:
  generate-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Generate Professional Stats
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          pip install requests
          python -c "
          import requests, json
          from datetime import datetime

          # Get comprehensive stats
          url = 'https://wakatime.com/api/v1/users/current/stats/last_7_days'
          headers = {'Authorization': f'Bearer $WAKATIME_API_KEY'}
          data = requests.get(url, headers=headers).json()['data']

          # Calculate additional metrics
          productivity = 'ðŸŸ¢ High' if data['is_up_to_date'] else 'ðŸ”´ Low'
          languages = data['languages'][:7]
          editors = data['editors'][:3]
          os = data['operating_systems'][:2]
          projects = data['projects'][:3]
          categories = data['categories']

          # Generate markdown
          stats = f'''
          ## WAKATIME DEVELOPMENT ANALYTICS (7-DAY REPORT)
          **Last Updated**: {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}

          ### SUMMARY
          - **Total Time**: {data['human_readable_total']}
          - **Daily Average**: {data['human_readable_daily_average']}
          - **Productivity**: {productivity}
          - **Best Day**: {data['best_day']['text']} ({data['best_day']['date']})

          ### TIME DISTRIBUTION
          - **Coding**: {categories['coding']['text']} ({categories['coding']['percent']}%)
          - **Building**: {categories['building']['text']} ({categories['building']['percent']}%)
          - **Debugging**: {categories['debugging']['text']} ({categories['debugging']['percent']}%)

          ### LANGUAGES (TOP 7)
          {''.join([f'- {lang['name']}: {lang['text']} ({lang['percent']}%)\n' for lang in languages])}

          ### DEVELOPMENT ENVIRONMENT
          **Editors**:
          {''.join([f'- {editor['name']}: {editor['text']} ({editor['percent']}%)\n' for editor in editors])}

          **Operating Systems**:
          {''.join([f'- {os['name']}: {os['text']} ({os['percent']}%)\n' for os in os])}

          ### PROJECTS (TOP 3)
          {''.join([f'- {project['name']}: {project['text']} ({project['percent']}%)\n' for project in projects])}

          ### ACTIVITY TIMELINE
          - **Morning (6-12)**: {data['human_readable_range']}
          - **Afternoon (12-18)**: {data['human_readable_range']}
          - **Evening (18-24)**: {data['human_readable_range']}
          - **Night (0-6)**: {data['human_readable_range']}
          '''

          # Save to file
          with open('stats.md', 'w') as f:
              f.write(f'```markdown\n{stats}\n```')

          # Update README
          with open('README.md', 'r') as f:
              content = f.read()

          start = content.find('<!--START_SECTION:waka-->')
          end = content.find('<!--END_SECTION:waka-->')

          if start != -1 and end != -1:
              new_content = content[:start] + '<!--START_SECTION:waka-->\n' + open('stats.md').read() + '\n<!--END_SECTION:waka-->' + content[end+len('<!--END_SECTION:waka-->'):]
              with open('README.md', 'w') as f:
                  f.write(new_content)
          "

      - name: Commit changes
        run: |
          git config --global user.name "WakaTime Analytics"
          git config --global user.email "analytics@github.com"
          git add README.md
          git commit -m "ðŸ“ˆ Update professional WakaTime stats"
          git push
