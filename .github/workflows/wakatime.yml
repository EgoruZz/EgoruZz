name: WakaTime Sync
concurrency:
  group: waka-sync-${{ github.ref }}
  cancel-in-progress: false

on:
  schedule:
    - cron: "30 0 * * *"
  workflow_dispatch:
    inputs:
      force-refresh:
        description: 'Force full refresh (ignore cache)'
        required: false
        default: 'false'

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Fetch and process stats
        id: process-stats
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
          convert_to_minutes() {
            local time_str="$1"
            echo "Converting: '$time_str'" >&2
            
            if [[ -z "$time_str" || "$time_str" == "0 secs" ]]; then
              echo 0
              return
            fi
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "X hrs Y mins"
            if [[ $time_str =~ ([0-9]+)\ hrs\ ([0-9]+)\ mins ]]; then
              hours=${BASH_REMATCH[1]}
              minutes=${BASH_REMATCH[2]}
              echo $((hours * 60 + minutes))
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "X hrs"
            elif [[ $time_str =~ ([0-9]+)\ hrs ]]; then
              hours=${BASH_REMATCH[1]}
              echo $((hours * 60))
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "X mins"
            elif [[ $time_str =~ ([0-9]+)\ mins ]]; then
              minutes=${BASH_REMATCH[1]}
              echo "$minutes"
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "X secs"
            elif [[ $time_str =~ ([0-9]+)\ secs ]]; then
              seconds=${BASH_REMATCH[1]}
              echo $((seconds / 60))
            else
              echo "Unknown format: $time_str" >&2
              echo 0
            fi
          }

          # –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
          generate_progress_bar() {
            local minutes=$1
            local max=$2
            local length=13
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if [[ $max -eq 0 ]]; then
              max=1
            fi
            if [[ $minutes -lt 0 ]]; then
              minutes=0
            fi
            
            local percent=$((minutes * 100 / max))
            percent=$((percent > 100 ? 100 : percent))
            percent=$((percent < 0 ? 0 : percent))
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            local bars=()
            local filled=$((percent * length / 100))
            
            for ((i=0; i<length; i++)); do
              if ((i < filled)); then
                bars[i]="‚ñ†"
              else
                bars[i]="‚ñ°"
              fi
            done
            
            local bar_str=$(IFS=''; echo "${bars[*]}")
            echo "${bar_str} ${percent}%"
          }

          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è stability bar
          generate_stability_bar() {
            local percent=$1
            local length=13
            percent=$((percent > 100 ? 100 : percent))
            percent=$((percent < 0 ? 0 : percent))
            
            local bars=()
            local filled=$((percent * length / 100))
            
            for ((i=0; i<length; i++)); do
              if ((i < filled)); then
                bars[i]="‚ñ†"
              else
                bars[i]="‚ñ°"
              fi
            done
            
            local bar_str=$(IFS=''; echo "${bars[*]}")
            echo "${bar_str} ${percent}%"
          }

          # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö WakaTime
          API_URL="https://wakatime.com/api/v1/users/current/stats/last_7_days?api_key=$WAKATIME_API_KEY"
          echo "::group::Fetching WakaTime data"
          curl -sS --retry 3 --retry-delay 2 "$API_URL" > wakatime.json
          echo "::endgroup::"

          # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
          total_seconds=$(jq -r '.data.total_seconds // 0' wakatime.json)
          daily_avg=$(jq -r '.data.human_readable_daily_average // "0 secs"' wakatime.json)
          best_day=$(jq -r '.data.best_day.text // "0 secs"' wakatime.json)
          best_day_date=$(jq -r '.data.best_day.date // ""' wakatime.json)
          total_time=$(jq -r '.data.human_readable_total // "0 secs"' wakatime.json)

          # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
          daily_minutes=$(convert_to_minutes "$daily_avg")
          best_day_minutes=$(convert_to_minutes "$best_day")
          total_minutes=$(convert_to_minutes "$total_time")
          total_hours=$(echo "$total_minutes / 60" | bc -l 2>/dev/null | awk '{printf "%.1f", $1}' || echo 0)

          # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Git
          git_stats=$(git log --since="7 days ago" --pretty=tformat: --numstat | 
            awk '{ add += $1; subs += $2 } END { printf "%s %s", add, subs }' || echo "0 0")
          added=$(echo $git_stats | cut -d' ' -f1)
          deleted=$(echo $git_stats | cut -d' ' -f2)
          
          # –í—ã—á–∏—Å–ª–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
          net_change=$((added - deleted))
          
          if (( $(echo "$total_hours > 0" | bc -l 2>/dev/null) )); then
            changes_per_hour=$(echo "scale=1; ($added + $deleted)/$total_hours" | bc -l 2>/dev/null || echo "0")
          else
            changes_per_hour=0
          fi
          
          if [[ $(($added + $deleted)) -gt 0 ]]; then
            stability=$(echo "scale=0; ($added - $deleted)*100/($added + $deleted)" | bc -l 2>/dev/null | awk '{printf "%.0f", $1}' || echo "0")
            density=$(echo "scale=2; $added/$deleted" | bc -l 2>/dev/null || echo "0")
          else
            stability=0
            density=0
          fi
          
          stability_bar=$(generate_stability_bar $stability)

          # Cognitive Load calculation (–æ–±—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é)
          cognitive_load=$(echo "scale=2; ($total_minutes * $changes_per_hour) / 1000" | bc -l 2>/dev/null | awk '{printf "%.2f", $1}' || echo "0.00")

          # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
          echo "<!--START_SECTION:waka-->" > stats.md
          echo "<div align='center'>" >> stats.md
          echo "" >> stats.md
          echo "## ‚è≥ WAKATIME WEEKLY REPORT ‚è≥" >> stats.md
          echo "" >> stats.md

          echo "### About" >> stats.md
          echo "" >> stats.md
          
          # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ About
          echo "| Period | Range | Cognitive Load | Code Stability |" >> stats.md
          echo "|:------:|:-----:|:--------------:|:--------------:|" >> stats.md
          echo "| Last 7 | $(date -d '7 days ago' +'%Y-%m-%d') ‚Üí $(date -d 'yesterday' +'%Y-%m-%d') | $cognitive_load | $stability% |" >> stats.md
          echo "" >> stats.md
          
          # Top languages
          echo "### Top languages" >> stats.md
          echo "" >> stats.md
          echo "| Language | Time | 20 hours |" >> stats.md
          echo "|:--------:|:----:|:-----:|" >> stats.md
          printf "| Total Time | %s | %s |\n" "$total_time" "$(generate_progress_bar $total_minutes 1200)" >> stats.md
          jq -r '.data.languages[0:5] | .[] | "\(.name)|\(.text)|\(.percent)"' wakatime.json 2>/dev/null | while IFS='|' read -r name text percent; do
            if [[ -n "$name" && "$name" != "null" ]]; then
              lang_minutes=$(convert_to_minutes "$text")
              printf "| %s | %s | %s |\n" "$name" "$text" "$(generate_progress_bar $lang_minutes 1200)" >> stats.md
            fi
          done
          echo "" >> stats.md
          
          # Code Generation Metrics (–±–µ–∑ Churn Rate)
          echo "### Code generation" >> stats.md
          echo "" >> stats.md
          echo "| Add (Œî+) | Del (Œî-) | Net Diff | Diffs/Hour | Balance |" >> stats.md
          echo "|:---------:|:-----------:|:----------:|:-----------:|:-------:|" >> stats.md
          printf "| **%'d** | **%'d** | %+'d | %.1f | %.2f |\n" \
            $added $deleted $net_change $changes_per_hour $density >> stats.md
          echo "" >> stats.md
          
          echo "</div>" >> stats.md
          echo "<!--END_SECTION:waka-->" >> stats.md

          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ README
          if [[ -f README.md ]]; then
            sed -i '/<!--START_SECTION:waka-->/,/<!--END_SECTION:waka-->/{
                /<!--START_SECTION:waka-->/r stats.md
                d
            }' README.md
          else
            cp stats.md README.md
          fi
          
          echo "stats-generated=true" >> $GITHUB_OUTPUT
          rm -f stats.md wakatime.json

      - name: Commit and push changes
        if: steps.process-stats.outputs.stats-generated == 'true'
        run: |
          if git diff --quiet --exit-code README.md; then
            echo "::notice::No changes detected in README.md"
            exit 0
          fi

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          git commit -m "üìä Update WakaTime stats [$(date +'%Y-%m-%d %H:%M')]"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git pull --rebase
          git push origin main
