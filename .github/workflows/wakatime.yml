name: WakaTime Sync
concurrency:
  group: wakatime-sync-${{ github.ref }}
  cancel-in-progress: false

on:
  schedule:
    - cron: "10 0 * * 1"  # Monday at 00:10 UTC (03:10 MSK)
    - cron: "0 */3 * * *" # Every 3 hours at :00
  workflow_dispatch:
    inputs:
      force-refresh:
        description: 'Force full refresh (ignore cache)'
        required: false
        default: 'false'

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc
          command -v lolcat >/dev/null 2>&1 || sudo gem install lolcat || echo "Lolcat not available"

      - name: Fetch and process stats
        id: process-stats
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          # Function for progress bars
          generate_progress_bar() {
            local value=${1:-0}
            local max=${2:-100}
            local size=${3:-20}
            local percentage=$(( value * 100 / max ))
            local progress=$(( percentage * size / 100 ))
            local remainder=$(( size - progress ))
            printf -v bar "%${progress}s" ""
            printf -v remainder "%${remainder}s" ""
            echo "${bar// /‚ñá}${remainder// /‚ñë} ${percentage}%"
          }

          # Determine report type
          if [[ "${{ github.event_name }}" == "schedule" ]] && [[ "${{ github.event.schedule }}" == "10 0 * * 1" ]] || 
             [[ "${{ inputs.force-refresh }}" == "true" ]]; then
            CACHE_BUSTER=$(date +%s)
            REPORT_TYPE="üöÄ WEEKLY RESET"
            DATE_RANGE="$(date -d 'last monday' +'%Y-%m-%d') ‚Üí $(date -d 'last sunday' +'%Y-%m-%d')"
            echo "::notice::Full refresh mode activated"
          else
            CACHE_BUSTER="cache"
            REPORT_TYPE="üìà AUTO UPDATE"
            DATE_RANGE="$(date -d '7 days ago' +'%Y-%m-%d') ‚Üí $(date +'%Y-%m-%d')"
          fi

          # Get WakaTime data
          API_URL="https://wakatime.com/api/v1/users/current/stats/last_7_days?api_key=$WAKATIME_API_KEY&cache_buster=$CACHE_BUSTER"
          echo "::group::Fetching WakaTime data"
          curl -sS --retry 3 --retry-delay 2 "$API_URL" > wakatime.json
          echo "::endgroup::"

          # Process data
          total_seconds=$(jq -r '.data.total_seconds // 0' wakatime.json)
          best_day_seconds=$(jq -r '.data.best_day.total_seconds // 0' wakatime.json)
          productivity=$(echo "scale=1; $best_day_seconds * 100 / ($total_seconds + 1)" | bc)
          week_days=$(jq -r '.data.days | length' wakatime.json)
          
          # Generate report
          echo '```text' > stats.md
          echo "‚è≥ $REPORT_TYPE ¬ª $DATE_RANGE" >> stats.md
          echo "üîÑ Last sync: $(date +'%Y-%m-%d %H:%M') (MSK)" >> stats.md
          echo "" >> stats.md
          
          # New Code Analytics table style
          echo "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì" >> stats.md
          echo "‚îÉ              CODE ANALYTICS               ‚îÉ" >> stats.md
          echo "‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´" >> stats.md
          printf "‚îÉ %-20s ‚îÉ %-15s ‚îÉ\n" "Total Time" "$(jq -r '.data.human_readable_total // "0 secs"' wakatime.json)" >> stats.md
          echo "‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïã‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´" >> stats.md
          printf "‚îÉ %-20s ‚îÉ %-15s ‚îÉ\n" "Daily Average" "$(jq -r '.data.human_readable_daily_average // "0 secs"' wakatime.json)" >> stats.md
          echo "‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïã‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´" >> stats.md
          printf "‚îÉ %-20s ‚îÉ %-15s ‚îÉ\n" "Best Day" "$(jq -r '.data.best_day.text // "0 secs"' wakatime.json)" >> stats.md
          echo "‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïã‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´" >> stats.md
          printf "‚îÉ %-20s ‚îÉ %-15s ‚îÉ\n" "Best Day Date" "$(jq -r '.data.best_day.date // "N/A"' wakatime.json)" >> stats.md
          echo "‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïã‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´" >> stats.md
          printf "‚îÉ %-20s ‚îÉ %-15s ‚îÉ\n" "Productivity" "$(generate_progress_bar ${productivity%.*} 100 20)" >> stats.md
          echo "‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïã‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´" >> stats.md
          printf "‚îÉ %-20s ‚îÉ %-15s ‚îÉ\n" "Active Days" "$week_days/7 days" >> stats.md
          echo "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îª‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ" >> stats.md
          echo "" >> stats.md
          
          # Weekly activity
          echo "üìÖ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú" >> stats.md
          echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" >> stats.md
          echo "‚îÇ –î–µ–Ω—å      ‚îÇ –í—Ä–µ–º—è –∫–æ–¥–∏–Ω–≥–∞  ‚îÇ –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏  ‚îÇ" >> stats.md
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
          jq -r '.data.days | to_entries? | .[]? | "\(.key)|\(.value.text)|\(.value.percent|floor)"' wakatime.json | 
          while IFS='|' read -r day text percent; do
            case "${day}" in
              "Mon") day_name="Monday" ;;
              "Tue") day_name="Tuesday" ;;
              "Wed") day_name="Wednesday" ;;
              "Thu") day_name="Thursday" ;;
              "Fri") day_name="Friday" ;;
              "Sat") day_name="Saturday" ;;
              "Sun") day_name="Sunday" ;;
              *) day_name="${day}" ;;
            esac
            
            formatted_text=$(echo "$text" | sed 's/hrs/hr/; s/mins/min/')
            printf "‚îÇ %-9s ‚îÇ %-14s ‚îÇ %-20s ‚îÇ\n" "$day_name" "$formatted_text" "$(generate_progress_bar $percent 100 20)"
          done >> stats.md
          echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" >> stats.md
          echo '```' >> stats.md

          # Update README
          sed -i '/<!--START_SECTION:waka-->/,/<!--END_SECTION:waka-->/{
              /<!--START_SECTION:waka-->/r stats.md
              d
          }' README.md
          
          # Set outputs
          echo "stats-generated=true" >> $GITHUB_OUTPUT
          rm -f stats.md wakatime.json

      - name: Commit and push changes
        if: steps.process-stats.outputs.stats-generated == 'true'
        run: |
          if git diff --quiet --exit-code README.md; then
            echo "::notice::No changes detected in README.md"
            exit 0
          fi

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          
          if [[ "${{ github.event_name }}" == "schedule" ]] && [[ "${{ github.event.schedule }}" == "10 0 * * 1" ]] || 
             [[ "${{ inputs.force-refresh }}" == "true" ]]; then
            git commit -m "üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ [$(date +'%Y-%m-%d')]" \
                       -m "–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏ | Cache buster: $(date +%s)"
          else
            git commit -m "üìà –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ [$(date +'%H:%M MSK')]" \
                       -m "–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ | –¢—Ä–∏–≥–≥–µ—Ä: ${{ github.event_name }}"
          fi
          
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git pull --rebase
          git push origin main
