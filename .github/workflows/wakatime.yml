name: WakaTime Sync
concurrency:
  group: wakatime-sync-${{ github.ref }}
  cancel-in-progress: false

on:
  schedule:
    - cron: "10 0 * * 1"  # Monday at 00:10 UTC (03:10 MSK)
    - cron: "0 */3 * * *" # Every 3 hours at :00
  workflow_dispatch:
    inputs:
      force-refresh:
        description: 'Force full refresh (ignore cache)'
        required: false
        default: 'false'

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc figlet toilet
          command -v cowsay >/dev/null 2>&1 || sudo apt-get install -y cowsay
          command -v fortune >/dev/null 2>&1 || sudo apt-get install -y fortune-mod

      - name: Fetch and process stats
        id: process-stats
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          # Function for progress bars
          generate_progress_bar() {
            local value=${1:-0}
            local max=${2:-100}
            local size=${3:-20}
            local percentage=$(( value * 100 / max ))
            local progress=$(( percentage * size / 100 ))
            local remainder=$(( size - progress ))
            printf -v bar "%${progress}s" ""
            printf -v remainder "%${remainder}s" ""
            echo "${bar// /‚ñá}${remainder// /‚ñë} ${percentage}%"
          }

          # Get current week dates (Monday to Sunday)
          current_week_start=$(date -d "last monday" +'%Y-%m-%d')
          current_week_end=$(date -d "this sunday" +'%Y-%m-%d')
          today=$(date +'%Y-%m-%d')

          # Determine report type
          if [[ "${{ github.event_name }}" == "schedule" ]] && [[ "${{ github.event.schedule }}" == "10 0 * * 1" ]] || 
             [[ "${{ inputs.force-refresh }}" == "true" ]]; then
            CACHE_BUSTER=$(date +%s)
            REPORT_TYPE="üöÄ WEEKLY RESET"
            HEADER_STYLE=$(toilet -f term "THIS WEEK STATS" 2>/dev/null || figlet "THIS WEEK STATS")
            DATE_RANGE="$current_week_start ‚Üí $current_week_end"
            echo "::notice::Full refresh mode activated"
          else
            CACHE_BUSTER="cache"
            REPORT_TYPE="üìà AUTO UPDATE"
            HEADER_STYLE=$(figlet -f mini "Live Stats" 2>/dev/null || echo "THIS WEEK STATS")
            DATE_RANGE="$current_week_start ‚Üí $today"
          fi

          # Get WakaTime data for current week
          API_URL="https://wakatime.com/api/v1/users/current/summaries?api_key=$WAKATIME_API_KEY&start=$current_week_start&end=$current_week_end&cache_buster=$CACHE_BUSTER"
          echo "::group::Fetching WakaTime data"
          curl -sS --retry 3 --retry-delay 2 "$API_URL" > wakatime.json
          echo "::endgroup::"

          # Process data
          total_seconds=$(jq -r '.data[0].grand_total.total_seconds // 0' wakatime.json)
          daily_avg=$(echo "scale=1; $total_seconds / 7" | bc)
          best_day_seconds=$(jq -r '.data[0].grand_total.max // 0' wakatime.json)
          productivity=$(echo "scale=1; $best_day_seconds * 100 / ($total_seconds + 1)" | bc)
          week_days=$(jq -r '[.data[0].days[] | select(.total_seconds > 0)] | length' wakatime.json)
          
          # Generate report
          echo '```text' > stats.md
          echo "$HEADER_STYLE" >> stats.md
          echo "‚è≥ $REPORT_TYPE ¬ª $DATE_RANGE" >> stats.md
          echo "üîÑ Last sync: $(date +'%Y-%m-%d %H:%M') (MSK)" >> stats.md
          echo "" >> stats.md
          
          # Clean two-column stats
          echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" >> stats.md
          echo "‚îÇ METRIC               ‚îÇ VALUE                ‚îÇ" >> stats.md
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
          printf "‚îÇ Total Time          ‚îÇ %20s ‚îÇ\n" "$(jq -r '.data[0].grand_total.text // "0 secs"' wakatime.json)" >> stats.md
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
          printf "‚îÇ Daily Average       ‚îÇ %20s ‚îÇ\n" "$(printf "%02d:%02d" $(($daily_avg/3600)) $(($daily_avg%3600/60))" >> stats.md
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
          printf "‚îÇ Best Day            ‚îÇ %20s ‚îÇ\n" "$(printf "%02d:%02d" $(($best_day_seconds/3600)) $(($best_day_seconds%3600/60))" >> stats.md
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
          printf "‚îÇ Productivity        ‚îÇ %20s ‚îÇ\n" "$(generate_progress_bar ${productivity%.*} 100 20)" >> stats.md
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
          printf "‚îÇ Active Days         ‚îÇ %20s ‚îÇ\n" "$week_days/7 days" >> stats.md
          echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" >> stats.md
          echo "" >> stats.md
          
          # Top technologies
          echo "üîù TOP 5 TECHNOLOGIES" >> stats.md
          jq -r '.data[0].languages[0:5] | .[]? | "\(.name)|\(.text)|\(.percent|floor)"' wakatime.json | 
          while IFS='|' read -r name text percent; do
            printf "%-15s %-12s %3d%%\n%s\n\n" "$name:" "$text" "$percent" "$(generate_progress_bar $percent 100 20)"
          done >> stats.md
          
          # Weekly activity
          echo "üìÖ WEEKLY ACTIVITY" >> stats.md
          echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" >> stats.md
          echo "‚îÇ Day   ‚îÇ Coding Time    ‚îÇ Activity Progress    ‚îÇ" >> stats.md
          echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
          jq -r '.data[0].days[] | "\(.date|strptime("%Y-%m-%d")|strftime("%a"))|\(.text)|\((.total_seconds*100/(.grand_total.total_seconds+1))|floor)"' wakatime.json | 
          while IFS='|' read -r day text percent; do
            printf "‚îÇ %-5s ‚îÇ %-14s ‚îÇ %-20s ‚îÇ\n" "$day" "$text" "$(generate_progress_bar $percent 100 20)"
          done >> stats.md
          echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" >> stats.md
          echo "" >> stats.md
          
          # Fun fact
          echo "üí° DEV TIP" >> stats.md
          (fortune -s computers programming science education 2>/dev/null || echo "Stay curious! Keep coding!") >> stats.md
          echo '```' >> stats.md

          # Update README
          sed -i '/<!--START_SECTION:waka-->/,/<!--END_SECTION:waka-->/{
              /<!--START_SECTION:waka-->/r stats.md
              d
          }' README.md
          
          # Set outputs
          echo "stats-generated=true" >> $GITHUB_OUTPUT
          rm -f stats.md wakatime.json

      - name: Commit and push changes
        if: steps.process-stats.outputs.stats-generated == 'true'
        run: |
          if git diff --quiet --exit-code README.md; then
            echo "::notice::No changes detected in README.md"
            exit 0
          fi

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          
          if [[ "${{ github.event_name }}" == "schedule" ]] && [[ "${{ github.event.schedule }}" == "10 0 * * 1" ]] || 
             [[ "${{ inputs.force-refresh }}" == "true" ]]; then
            git commit -m "üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ [$(date +'%Y-%m-%d')]" \
                       -m "–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏ | Cache buster: $(date +%s)"
          else
            git commit -m "üìà –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ [$(date +'%H:%M MSK')]" \
                       -m "–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ | –¢—Ä–∏–≥–≥–µ—Ä: ${{ github.event_name }}"
          fi
          
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git pull --rebase
          git push origin main
