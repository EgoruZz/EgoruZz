name: WakaTime Sync
concurrency:
  group: wakatime-sync-${{ github.ref }}
  cancel-in-progress: false

on:
  schedule:
    - cron: "10 0 * * 1"  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 00:10 UTC (03:10 –ú–°–ö)
    - cron: "0 */3 * * *" # –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –≤ :00
  workflow_dispatch:
    inputs:
      force-refresh:
        description: 'Force full refresh (ignore cache)'
        required: false
        default: 'false'

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc figlet toilet boxes
          sudo npm install -g carbon-now-cli || echo "Carbon-now-cli installation failed"
          command -v cowsay >/dev/null 2>&1 || sudo apt-get install -y cowsay
          command -v fortune >/dev/null 2>&1 || sudo apt-get install -y fortune-mod
          command -v lolcat >/dev/null 2>&1 || sudo gem install lolcat || echo "Lolcat not available"

      - name: Fetch and process stats
        id: process-stats
        env:
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
          generate_progress_bar() {
            local value=${1:-0}
            local max=${2:-100}
            local size=${3:-20}
            local percentage=$(( value * 100 / max ))
            local progress=$(( percentage * size / 100 ))
            local remainder=$(( size - progress ))
            printf -v bar "%${progress}s" ""
            printf -v remainder "%${remainder}s" ""
            echo "${bar// /‚ñá}${remainder// /‚ñë} ${percentage}%"
          }

          # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
          if [[ "${{ github.event_name }}" == "schedule" ]] && [[ "${{ github.event.schedule }}" == "10 0 * * 1" ]] || 
             [[ "${{ inputs.force-refresh }}" == "true" ]]; then
            CACHE_BUSTER=$(date +%s)
            REPORT_TYPE="üöÄ WEEKLY RESET"
            HEADER_STYLE=$( (toilet -f future --filter border:metal "DEV STATS" 2>/dev/null || 
                          figlet -f slant "CODE PULSE" | lolcat 2>/dev/null ||
                          echo "WEEKLY CODING REPORT") )
            DATE_RANGE="$(date -d 'last monday' +'%Y-%m-%d') ‚Üí $(date -d 'last sunday' +'%Y-%m-%d')"
            echo "::notice::Full refresh mode activated"
          else
            CACHE_BUSTER="cache"
            REPORT_TYPE="üìà AUTO UPDATE"
            HEADER_STYLE=$( (figlet -f mini "Live Stats" | lolcat 2>/dev/null || echo "CODING STATS") )
            DATE_RANGE="$(date -d '7 days ago' +'%Y-%m-%d') ‚Üí $(date +'%Y-%m-%d')"
          fi

          # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
          API_URL="https://wakatime.com/api/v1/users/current/stats/last_7_days?api_key=$WAKATIME_API_KEY&cache_buster=$CACHE_BUSTER"
          echo "::group::Fetching WakaTime data"
          curl -sS --retry 3 --retry-delay 2 "$API_URL" > wakatime.json
          HTTP_CODE=$(curl -s -o /dev/null -w '%{http_code}' "$API_URL")
          echo "HTTP Status: $HTTP_CODE"
          echo "::endgroup::"

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
          if ! jq -e '.data' wakatime.json >/dev/null 2>&1; then
            echo "::error::Invalid WakaTime API response"
            ERROR_MSG=$(jq -r '.message // empty' wakatime.json 2>/dev/null || echo "Unknown error")
            
            echo '```text' > stats.md
            echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" >> stats.md
            echo "‚ïë        ‚ö†Ô∏è API ERROR           ‚ïë" >> stats.md
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" >> stats.md
            echo "‚ïë $REPORT_TYPE ¬ª $DATE_RANGE    ‚ïë" >> stats.md
            echo "‚ïë                                ‚ïë" >> stats.md
            echo "‚ïë HTTP: $HTTP_CODE               ‚ïë" >> stats.md
            echo "‚ïë Error: $ERROR_MSG              ‚ïë" >> stats.md
            echo "‚ïë                                ‚ïë" >> stats.md
            echo "‚ïë Last sync attempt:             ‚ïë" >> stats.md
            echo "‚ïë $(date +'%Y-%m-%d %H:%M MSK') ‚ïë" >> stats.md
            echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" >> stats.md
            echo '```' >> stats.md
          else
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            total_seconds=$(jq -r '.data.total_seconds // 0' wakatime.json)
            best_day_seconds=$(jq -r '.data.best_day.total_seconds // 0' wakatime.json)
            productivity=$(echo "scale=1; $best_day_seconds * 100 / ($total_seconds + 1)" | bc)
            week_days=$(jq -r '.data.days | length' wakatime.json)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            echo '```text' > stats.md
            echo "$HEADER_STYLE" | (boxes -d parchment 2>/dev/null || cat) >> stats.md
            echo "‚è≥ $REPORT_TYPE ¬ª $DATE_RANGE" >> stats.md
            echo "üîÑ Last sync: $(date +'%Y-%m-%d %H:%M') (MSK)" >> stats.md
            echo "" >> stats.md
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" >> stats.md
            echo "‚ïë            üìä CODING ANALYTICS              ‚ïë" >> stats.md
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" >> stats.md
            printf "‚ïë Total Time          ‚ïë %21s ‚ïë\n" "$(jq -r '.data.human_readable_total // "0 secs"' wakatime.json)" >> stats.md
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" >> stats.md
            printf "‚ïë Daily Avg           ‚ïë %21s ‚ïë\n" "$(jq -r '.data.human_readable_daily_average // "0 secs"' wakatime.json)" >> stats.md
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" >> stats.md
            printf "‚ïë Best Day            ‚ïë %21s ‚ïë\n" "$(jq -r '(.data.best_day.text // "0 secs") + " (" + (.data.best_day.date // "N/A") + ")"" wakatime.json)" >> stats.md
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" >> stats.md
            printf "‚ïë Productivity        ‚ïë %21s ‚ïë\n" "$(generate_progress_bar ${productivity%.*} 100 20)" >> stats.md
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" >> stats.md
            printf "‚ïë Active Days         ‚ïë %21s ‚ïë\n" "$week_days/7 days" >> stats.md
            echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" >> stats.md
            echo "" >> stats.md
            
            echo "üåà TOP 5 TECHNOLOGIES" >> stats.md
            jq -r '.data.languages[0:5] | .[]? | "‚ñå \(.name): \(.text) \((.percent|floor)*100/100)%\n  \((generate_progress_bar (.percent|floor) 100 20))"' wakatime.json | 
            awk '{print "\033[38;5;" (NR+160) "m" $0 "\033[0m"}' | 
            ansi2txt >> stats.md
            
            # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            echo "üìÖ WEEKLY ACTIVITY" >> stats.md
            echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" >> stats.md
            echo "‚îÇ Day   ‚îÇ Coding Time    ‚îÇ Activity Progress    ‚îÇ" >> stats.md
            echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" >> stats.md
            jq -r '.data.days | to_entries? | .[]? | "‚îÇ \(.key[:3])   ‚îÇ \(.value.text) ‚îÇ \(generate_progress_bar (.value.percent|floor) 100 20) ‚îÇ"' wakatime.json >> stats.md
            echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" >> stats.md
            echo "" >> stats.md
            
            # –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã
            echo "üí° DEV TIP" >> stats.md
            (fortune -s computers programming science education 2>/dev/null || echo "Keep coding!") | 
            (cowsay -f $(ls /usr/share/cowsay/cows/ 2>/dev/null | shuf -n 1) 2>/dev/null || cat) | 
            (lolcat 2>/dev/null || cat) >> stats.md
            echo '```' >> stats.md
          fi

          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ README
          sed -i '/<!--START_SECTION:waka-->/,/<!--END_SECTION:waka-->/{
              /<!--START_SECTION:waka-->/r stats.md
              d
          }' README.md
          
          # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ stats.md
          echo "stats-generated=true" >> $GITHUB_OUTPUT

          # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è carbon-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          if command -v carbon-now &>/dev/null && [ -f stats.md ]; then
            echo "Generating Carbon image..."
            grep -v '```' stats.md > /tmp/stats_for_carbon.md
            carbon-now /tmp/stats_for_carbon.md -t one-dark -l /tmp/carbon.png -h
            echo "carbon-image-generated=true" >> $GITHUB_OUTPUT
          else
            echo "carbon-image-generated=false" >> $GITHUB_OUTPUT
          fi

          # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          rm -f stats.md wakatime.json /tmp/stats_for_carbon.md

      - name: Upload Carbon Image Artifact
        if: steps.process-stats.outputs.carbon-image-generated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: wakatime-stats
          path: /tmp/carbon.png
          retention-days: 7  # –•—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç 7 –¥–Ω–µ–π

      - name: Commit and push changes
        if: steps.process-stats.outputs.stats-generated == 'true'
        run: |
          if git diff --quiet --exit-code README.md; then
            echo "::notice::No changes detected in README.md"
            exit 0
          fi

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          
          if [[ "${{ github.event_name }}" == "schedule" ]] && [[ "${{ github.event.schedule }}" == "10 0 * * 1" ]] || 
             [[ "${{ inputs.force-refresh }}" == "true" ]]; then
            git commit -m "üöÄ Weekly stats reset [$(date +'%Y-%m-%d')]" \
                       -m "Fresh week start | Cache buster: $(date +%s)"
          else
            git commit -m "üìà Stats auto-update [$(date +'%H:%M MSK')]" \
                       -m "Incremental refresh | Trigger: ${{ github.event_name }}"
          fi
          
          git pull --rebase
          git push
